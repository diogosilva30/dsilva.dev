# From: https://dockerswarm.rocks/traefik/
version: '3.8'

# Define volumes
volumes:
  # Create a volume to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates
  traefik-public-certificates:
  vault:

# Define networks
networks:
  # Use the previously created public network "traefik-public", shared with other
  # services that need to be publicly available via this Traefik
  traefik-public:
    driver: overlay
    external: true

# Use external Docker secrets
secrets:
  do_auth_token:
    external: true

# Define services
services:
  
  # The main loadbalancer
  traefik:
    image: traefik:v2.2
    ports:
      # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
      - target: 80
        published: 80
        mode: host
      # Listen on port 443, default for HTTPS
      - target: 443
        published: 443
        mode: host
    deploy:
      placement:
        constraints:
          # Make the traefik service run only on the node with this label
          # as the node with it has the volume for the certificates
          - node.labels.traefik-public.traefik-public-certificates == true
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik-public
        
        # global redirect to https
        - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
        - traefik.http.routers.http-catchall.entrypoints=web
        - traefik.http.routers.http-catchall.middlewares=redirect-to-https
        - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
        
        # Enable TLS
        - traefik.http.routers.traefik.tls=true
        # wildcard certificate to use
        - traefik.http.routers.traefik.tls.domains[0].main=dsilva.dev
        - traefik.http.routers.traefik.tls.domains[0].sans=*.dsilva.dev
        
        # dashboard
        - traefik.http.routers.traefik.rule=Host(`traefik.dsilva.dev`)
        - traefik.http.routers.traefik.entrypoints=websecure
        - traefik.http.routers.traefik.service=api@internal
        - traefik.http.routers.traefik.middlewares=authtraefik
        - traefik.http.middlewares.authtraefik.basicauth.users=admin:$$apr1$$aJxfzY1Z$$Kh6FWCDTR/GKEXalL1qdT0
    
        # Define the port inside of the Docker service to use
        - traefik.http.services.traefik.loadbalancer.server.port=8080
        
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
      - traefik-public-certificates:/certificates
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label "traefik.constraint-label=traefik-public"
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.websecure.address=:443
      # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
      - --certificatesresolvers.le.acme.email=email@dsilva.dev
      # Use DNS Challenge to provide wild card certificates
      - --certificatesresolvers.le.acme.dnschallenge=true
      # A provider must be specified
      - --certificatesresolvers.le.acme.dnschallenge.provider=digitalocean
      - --certificatesresolvers.myresolver.acme.dnschallenge.delaybeforecheck=0
      # Store the Let's Encrypt certificates in the mounted volume
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public

    # Mount secrets from Docker
    secrets:
      # Digital Ocean auth token for WildCard DNS Challenge
      - do_auth_token
    
    # Environment variables
    environment:
      # Add the digital ocean token
      DO_AUTH_TOKEN_FILE: /run/secrets/do_auth_token # --> Use the file version because Docker mounts secrets at file
      
  # Hashicorp vault for secret management
  vault:
    image: vault:1.8.4

    deploy:
      replicas: 1
      labels:
        - traefik.enable=true
        # Use the traefik-public network
        - traefik.docker.network=traefik-public
        # Add required label for traefik (Traefik will only use services with this label)
        - traefik.constraint-label=traefik-public
        # Add routing for this service
        - traefik.http.routers.vault.tls=true
        - traefik.http.routers.vault.entrypoints=websecure
        - traefik.http.routers.vault.rule=Host(`vault.dsilva.dev`)
        # Define the port inside of the Docker service to use
        - traefik.http.services.vault.loadbalancer.server.port=8200

    environment:
      - VAULT_ADDR=http://127.0.0.1:8200 # Run on port 8200
      - VAULT_API_ADDR=http://127.0.0.1:8200
      - VAULT_LOCAL_CONFIG={"backend":{"file":{"path":"vault/file"}},"listener":{"tcp":{"address":"0.0.0.0:8200","tls_disable":1}},"ui":true, "disable_mlock":true}
    cap_add:
      - IPC_LOCK
    command: server
    volumes:
      - vault:/vault/file

    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public

  
